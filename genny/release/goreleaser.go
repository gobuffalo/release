package release

import (
	"os"
	"os/exec"
	"path/filepath"
	"strings"

	"github.com/gobuffalo/genny"
	"github.com/gobuffalo/genny/movinglater/git"
	"github.com/gobuffalo/genny/movinglater/plushgen"
	"github.com/gobuffalo/plush"
	"github.com/pkg/errors"
)

func runGoreleaser(opts *Options) genny.RunFn {
	return func(r *genny.Runner) error {
		gyp, gypOK := r.FindFile(".goreleaser.yml.plush")
		gy, gyOK := r.FindFile(".goreleaser.yml")
		if gypOK != nil && gyOK != nil {
			r.Logger.Info("No .goreleaser.yml(.plush) detected so skipping goreleaser step")
			return nil
		}

		if gypOK == nil {
			ctx := plush.NewContext()
			ctx.Set("brew", !(strings.Contains(opts.Version, "-beta") || strings.Contains(opts.Version, "-rc")))
			t := plushgen.Transformer(ctx)
			f, err := t.Transform(gyp)
			if err != nil {
				return errors.WithStack(err)
			}

			if err := r.File(genny.NewFile(gy.Name(), strings.NewReader(warningLabel+f.String()))); err != nil {
				return errors.WithStack(err)
			}

			if gyOK != nil || (f.String() != gy.String()) {
				if err := git.Run("add", ".goreleaser.yml")(r); err != nil {
					if errors.Cause(err) != git.ErrWorkingTreeClean {
						return errors.WithStack(err)
					}
				}
				if err := git.Run("commit", "-m", "generated goreleaser", ".goreleaser.yml")(r); err != nil {
					if errors.Cause(err) != git.ErrWorkingTreeClean {
						return errors.WithStack(err)
					}
				}
			}
		}

		c := exec.Command("goreleaser")
		if _, err := os.Stat(filepath.Join(".", "dist")); err == nil {
			c.Args = append(c.Args, "--rm-dist")
		}
		if err := r.Exec(c); err != nil {
			return errors.WithStack(err)
		}
		return nil
	}
}

const warningLabel = "# Code generated by github.com/gobuffalo/release. DO NOT EDIT.\n# Edit .goreleaser.yml.plush instead\n\n"
